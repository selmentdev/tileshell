//
//
// The MIT License(MIT)
// 
// Copyright(c) 2015 by Karol Grzybowski
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
//
#pragma once

#include <tileshell/required.hxx>
#include <tileshell.drawing/geometrybuilder.hxx>
#include <tileshell.xml/xml.hxx>

namespace TileShell::UI
{
    ///
    /// @brief
    ///     Specifies generated geometry types.
    ///
    enum class GeometryType
    {
        ///
        /// @brief
        ///     Static interface geometry.
        ///
        /// @details
        ///     Static geometry is generated by UI elements that are rarely updated.
        ///
        Static,

        ///
        /// @brief
        ///     Dynamic interface geometry.
        ///
        /// @details
        ///     Dynamic geometry is generated by UI elements that are frequently updated.
        ///
        Dynamic,

        ///
        /// @brief
        ///     Static text geometry.
        ///
        /// @details
        ///     Static text geometry is generated for texts that are rarely updated.
        ///
        StaticText,

        ///
        /// @brief
        ///     Dynamic text geometry.
        ///
        /// @details
        ///     Dynamic text geometry is generated for textx that are frequently updated.
        ///
        DynamicText
    };

    ///
    /// @brief
    ///     Declares interface for visual element.
    ///
    struct IElement
    {
    public:
        virtual ~IElement() { }

    public:
        ///
        /// @brief
        ///     Updates element.
        ///
        /// @param[in] delta
        ///     A time since last frame, in seconds.
        ///
        /// @returns
        ///     true when successfull, false otherwise.
        ///
        virtual bool Update(float32_t delta) = 0;

        ///
        /// @brief
        ///     Generates specified geometry type.
        ///
        /// @details
        ///     This method is called when element should generate geometry of specified type.
        ///
        /// @param[in] builder
        ///     A geometry builder.
        /// @param[in] geometry_type
        ///     A geometry type.
        ///
        /// @returns
        ///     true when successful, false otherwise.
        ///
        virtual bool GenerateGeometry(Drawing::GeometryBuilder& builder, GeometryType geometry_type) = 0;

        ///
        /// @brief
        ///     Deserializes eleement from xml node.
        ///
        /// @returns
        ///     true when successful, false otherwise.
        ///
        virtual bool Deserialize(Xml::XmlNode* node) = 0;
    };

}
